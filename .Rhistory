k = 6
heads = rep(1,k)
tails = rep(1,k)
success = 0
success
print(1-pbinom(0,94,1/32))
trials = 1000
n = 100
k = 6
heads = rep(1,k)
tails = rep(1,k)
success = 0
for (i in 1:trials) {
flag = FALSE
flips = rbinom(n,1,0.5)
print(flips)
for (j in 1:(n-k+1)) {
if (all(flips[j:j+k-1] == heads) | all(flips[j:j+k-1] == tails)) {
flag = TRUE
}
}
if (flag == TRUE) {
success = success + 1
}
}
print(success/trials)
print(1-pbinom(0,94,1/32))
trials = 1000
n = 100
k = 30
heads = rep(1,k)
tails = rep(1,k)
success = 0
for (i in 1:trials) {
flag = FALSE
flips = rbinom(n,1,0.5)
print(flips)
for (j in 1:(n-k+1)) {
if (all(flips[j:j+k-1] == heads) | all(flips[j:j+k-1] == tails)) {
flag = TRUE
}
}
if (flag == TRUE) {
success = success + 1
}
}
print(success/trials)
A
A = rep(1,100)
A
A = rbinom(1,100,0.5)
A
A = rbinom(100,1,0.5)
A == rep(1,100)
all(A == rep(1,100))
trials = 1000
n = 100
k = 30
heads = rep(1,k)
tails = rep(0,k)
success = 0
for (i in 1:trials) {
flag = FALSE
flips = rbinom(n,1,0.5)
for (j in 1:(n-k+1)) {
if (all(flips[j:j+k-1] == heads) | all(flips[j:j+k-1] == tails)) {
flag = TRUE
}
}
if (flag == TRUE) {
success = success + 1
}
}
print(success/trials)
print(1-pbinom(0,94,1/32))
trials <- 1000
n <- 100
k <- 30
heads <- rep(1, k)
tails <- rep(0, k)
success <- 0
for (i in 1:trials) {
flag <- FALSE
flips <- rbinom(n, 1, 0.5)
print(flips)
for (j in 1:(n - k + 1)) {
if (all(flips[j:(j + k - 1)] == heads) | all(flips[j:(j + k - 1)] == tails)) {
flag <- TRUE
break
}
}
if (flag) {
success <- success + 1
}
}
print(success / trials)
trials <- 1000
n <- 100
k <- 6
heads <- rep(1, k)
tails <- rep(0, k)
success <- 0
for (i in 1:trials) {
flag <- FALSE
flips <- rbinom(n, 1, 0.5)
for (j in 1:(n - k + 1)) {
if (all(flips[j:(j + k - 1)] == heads) | all(flips[j:(j + k - 1)] == tails)) {
flag <- TRUE
break
}
}
if (flag) {
success <- success + 1
}
}
print(success / trials)
trials <- 100000
n <- 100
k <- 6
heads <- rep(1, k)
tails <- rep(0, k)
success <- 0
for (i in 1:trials) {
flag <- FALSE
flips <- rbinom(n, 1, 0.5)
for (j in 1:(n - k + 1)) {
if (all(flips[j:(j + k - 1)] == heads) | all(flips[j:(j + k - 1)] == tails)) {
flag <- TRUE
break
}
}
if (flag) {
success <- success + 1
}
}
print(success / trials)
print(1-pbinom(0,94,1/64))
print(1-pbinom(0,94,1/64))
print(1-dbinom(0,94,1/64))
print(1-dbinom(0,2,1/64))
print(1-dbinom(0,3,1/64))
1-dbinom(0,3,1/64)
pbinom(1,3,1/64)
pbinom(1,3,1/64,lower.tail=False)
pbinom(1,3,1/64,lower.tail=FALSE)
pbinom(0,3,1/64,lower.tail=FALSE)
pbinom(-1,3,1/64,lower.tail=FALSE)
pbinom(0,3,1/64,lower.tail=FALSE)
pbinom(1,3,1/64,lower.tail=FALSE)
pbinom(0,3,1/64,lower.tail=FALSE)
pbinom(0,2,1/64,lower.tail=FALSE)
pbinom(0,2,63/64,lower.tail=FALSE)
pbinom(2,2,63/64,lower.tail=FALSE)
pbinom(1,2,63/64,lower.tail=FALSE)
1-pbinom(1,2,63/64,lower.tail=FALSE)
rnorm(36,32,3)
p = 0.4658
pbinom(10,87,)
pbinom(10,87,p)
pbinom(40,87,p)
pbinom(20,87,p)
pbinom(90,87,p)
pbinom(70,87,p)
87*0.6092
pbinom(52,87,p)
dbinom(52,87,p)
dbinom(53,87,p)
dbinom(43,87,p)
n = 87
x_bar = 87*0.6092
x_bar
sd = n*p*(1-p)
sd
x_bar + qnorm(0.95)*sd/sqrt(n)
0.6092 + qnorm(0.95)*sd/sqrt(n)
p = 0.6092
sd
sd = n*p*(1-p)
sd
qnorm(0.95)
sd = sqrt(n*p*(1-p))
0.6092 + qnorm(0.95)*sd/sqrt(n)
sd
n
n*p + qnorm(0.95)*sd/sqrt(n)
p
sd
sqrt(n)
n*p
n*p + qnorm(0.95)*sd/sqrt(n)
n*p + qnorm(0.05)*sd/sqrt(n)
n*p + qnorm(0.001)*sd/sqrt(n)
n*p + qnorm(0.00001)*sd/sqrt(n)
qnorm(0.95)
qnorm(0.975)
n*p + qnorm(0.95)*sd
n*p + qnorm(0.95)*sd/sqrt(n)
clc
p = 0.6092
sd = sqrt(p*(1-p))
sd
n = 87
p +
a
p + qnorm(0.975)*sd/sqrt(n)
p - qnorm(0.975)*sd/sqrt(n)
p
n = 1000
p - qnorm(0.975)*sd/sqrt(n)
p = 0.4658
n = 1462
sd = sqrt(p*(1-p))
p - qnorm(0.975)*sd/sqrt(n)
p + qnorm(0.975)*sd/sqrt(n)
pnorm(0.6092)
pnorm(0.6092, mean=0.4658, sd=sqrt(p*(1-p))/sqrt(n))
pnorm(0.6092, mean=0.4658, sd=sqrt(p*(1-p))/sqrt(n),lower.tail=F)
p
n
pnorm(0.6092, mean=0.4658, sd=sqrt(p*(1-p))/sqrt(n),lower.tail=F)
mu = 0.4658
x_bar = 0.6092
n = 87
p = 0.6092
z = (x_bar-mu)/(sqrt(p*(1-p))/sqrt(n))
z
qnorm(z)
pnorm(z)
1-pnorm(z)
mu = 0.4658
x_bar = 0.6092
sd = sqrt(0.6092(1-0.6092))
sd = sqrt(0.6092*(1-0.6092))
sd
x_bar + qnorm(0.975)*sd/sqrt(n)
x_bar - qnorm(0.975)*sd/sqrt(n)
x_bar - qnorm(0.975)*sd
x_bar + qnorm(0.975)*sd/sqrt(n)
qnorm(0.975)
install.packages("installr")
library(installr)
installr::install.RStudio()
install.packages("tidyverse")
install.packages("palmerpenguins")
#| label: load-packages
#| include: false
library(tidyverse)
library(palmerpenguins)
#| label: plot-penguins
#| warning: false
#| echo: false
ggplot(penguins,
aes(x = flipper_length_mm, y = bill_length_mm)) +
geom_point(aes(color = species, shape = species)) +
scale_color_manual(values = c("darkorange","purple","cyan4")) +
labs(
title = "Flipper and bill length",
subtitle = "Dimensions for penguins at Palmer Station LTER",
x = "Flipper length (mm)", y = "Bill length (mm)",
color = "Penguin species", shape = "Penguin species"
) +
theme_minimal()
git --version
git
2 + 2
reticulate::repl_python()
2 + 2
data = 1:10
matrix(data, nrows=2)
matrix(data, nrow=2)
matrix(data, nrow=3)
income = 80_000
income = 80000
income <- 80000
remaining_income <- income
tax <- 0
if (income <= 11000) {
tax <- tax + min(11000,remaining_income) * 0.1
remaining_income <- remaining_income - min(11000,remaining_income)
} else if (income <= 44725) {
tax <- tax + min(44725,remaining_income) * 0.12
remaining_income <- remaining_income - min(44725,remaining_income)
} else if (income <= 95375) {
tax <- tax + min(95375,remaining_income) * 0.22
remaining_income <- remaining_income - min(95375,remaining_income)
}
print(tax)
print(80000 - tax)
income <- 60000
remaining_income <- income
tax <- 0
if (income <= 11000) {
tax <- tax + min(11000,remaining_income) * 0.1
remaining_income <- remaining_income - min(11000,remaining_income)
} else if (income <= 44725) {
tax <- tax + min(44725,remaining_income) * 0.12
remaining_income <- remaining_income - min(44725,remaining_income)
} else if (income <= 95375) {
tax <- tax + min(95375,remaining_income) * 0.22
remaining_income <- remaining_income - min(95375,remaining_income)
}
print(tax)
print(80000 - tax)
vec <- c(1,2,3,4)
vec[1:2]
vec[1:4]
pi
log(e)
log(2.71)
log_res <- 0
goal <- (exp(pi)-exp(-1*pi))/(2*pi)
k <- 1
while (abs(exp(init)-goal) > 0.0001) {
log_res <- log_res + log(1+1/k^2)
k <- k + 1
}
log_res <- 0
goal <- (exp(pi)-exp(-1*pi))/(2*pi)
k <- 1
while (abs(exp(log_res)-goal) > 0.0001) {
log_res <- log_res + log(1+1/k^2)
k <- k + 1
}
exp(log_res)
log_res <- 0
goal <- (exp(pi)-exp(-1*pi))/(2*pi)
k <- 1
while (abs(exp(log_res)-goal) > 0.0001) {
log_res <- log_res + log(1+1/k^2)
k <- k + 1
}
goal
exp(log_res)
log_res <- 0
goal <- (exp(pi)-exp(-1*pi))/(2*pi)
k <- 1
while (abs(exp(log_res)-goal) > 0.0001) {
log_res <- log_res + log(1+1/k^2)
k <- k + 1
}
goal
exp(log_res)
print(k)
x <- list(a = 1:5,b = rnorm(10))
x
x$a
x$b
lapply(x,mean)
a <- 1:4
lapply(a,runif, min=0, max=5)
lapply(a,runif, min=0, max=5)
lapply(a,runif, min=0, max=5)
lapply(a,runif, min=0, max=5)
str(split)
?'gl'
gl(3,10)
gl(3,10,40)
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1,f2)
split(x, f1)
split(x, f2)
split(x, list(f1,f2)
)
split(x, list(f1,f2), drop=T)
A <- 1:10
f1 <- gl(5,2)
tapply(A,f,mean)
tapply(A,f1,mean)
tapply(A,f1,mean,simplify=T)
reP(3,7)
rep(3,7)
qnorm(3.276116264574588)
pnorm(3.276116264574588)
pnorm(3.276116264574588, lower.tail=T)
pnorm(3.276116264574588, lower.tail=F)
pnorm(3.276116264574588, lower.tail=F) * 100
1/2000
1/200
x <- 1
g04 <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
g04()
pbinom(1,10,0.01)
pbinom(0,10,0.01)
pbinom(-1,10,0.01)
pbinom(0,10,0.01)
8.3*12
pbinom(0,12,0.083)
x <- 1:10000
u <- runif(10000)
plot(x,u)
histrogram(x,u)
hist(x,u)
?hist
hist(u)
?hist
hist(u,breaks=2)
hist(u,breaks=10)
hist(u,breaks=20)
rm(x)
p = 0.5
y = logb(-x+1,base=1-p)
y = logb(-u+1,base=1-p)
hist(y)
g = rgeom(10000)
g = rgeom(10000,p)
hist(g)
x <- seq(-5, 5, length = 200)
dc <- dcauchy(x, location = 0, scale = 1)
dn <- dnorm(x, mean = 0, sd = 1)
par(mfrow=c(1,2))
plot(x, dn, type="l")
lines(x, dc, col="blue", lty=2)
legend("topright", col=c("black", "blue"), lty=c(1,2), legend = c("normal", "Cauchy"), cex=0.5)
plot(x, dn/dc, type="l")
par(mfrow=c(1,2))
plot(x, dn, type="l")
lines(x, dc, col="blue", lty=2)
legend("topright", col=c("black", "blue"), lty=c(1,2), legend = c("normal", "Cauchy"), cex=0.5)
plot(x, dn/dc, type="l")
foo <- function(x) dnorm(x)/dcauchy(x)
opt <- optimize(foo, c(0, 4), maximum=TRUE)
a <- opt$objective
a
## [1] 1.520347
ah <- a * dc
a
plot(x, dn, type="l", ylim=c(0,0.5), lwd=2)
lines(x, dc, col="blue", lty=2)
lines(x, ah, col="blue", lty=2, lwd=2)
legend("topright", col=c("black", "blue", "blue"), lty=c(1,2,2), lwd=c(1,1,2), legend = c("normal", "Cauchy", "a * Cauchy"), cex=0.5)
alpha <- function(x){
dnorm(x)/(1.520347 * dcauchy(x))
}
rejectionNorm <- function(n) {
x <- rcauchy(10000,0,1)
u <- runif(10000)
return(na.omit(ifelse(u <= alpha(x), x, NA)))
}
set.seed(123)
x <- rejectionNorm(10000)
hist(x, prob=TRUE)
curve(dnorm(x), lty = 1, lwd = 2, add = TRUE)
reticulate::repl_python()
import pandas as pd
pip install pandas
!pip install pandas
import pandas as pd
2011_data = pd.read_csv("data_files//all_data_M_2011")
2011data = pd.read_csv("data_files//all_data_M_2011")
data_2011 = pd.read_csv("data_files//all_data_M_2011")
data_2011 = pd.read_excel("data_files//all_data_M_2011.xlsx")
!pip install openpyxl
data_2011 = pd.read_excel("data_files//all_data_M_2011.xlsx")
data_2011.head()
data_2011 = pd.read_excel("data_files//all_data_M_2011.xlsx")
data_2012 = pd.read_excel("data_files//all_data_M_2012.xlsx")
data_2013 = pd.read_excel("data_files//all_data_M_2013.xlsx")
data_2014 = pd.read_excel("data_files//all_data_M_2014.xlsx")
data_2015 = pd.read_excel("data_files//all_data_M_2015.xlsx")
data_2016 = pd.read_excel("data_files//all_data_M_2016.xlsx")
data_2017 = pd.read_excel("data_files//all_data_M_2017.xlsx")
data_2018 = pd.read_excel("data_files//all_data_M_2018.xlsx")
data_2019 = pd.read_excel("data_files//all_data_M_2019.xlsx")
data_2020 = pd.read_excel("data_files//all_data_M_2020.xlsx")
data_2021 = pd.read_excel("data_files//all_data_M_2021.xlsx")
data_2022 = pd.read_excel("data_files//all_data_M_2022.xlsx")
data_2023 = pd.read_excel("data_files//all_data_M_2023.xlsx")
data_2011.to_csv("data_files//all_data_M_2011.csv", index=False)
import os
print(os.getcwd())
os.chdir("C:\Users\spyma\Desktop\Programming\School\DATA375\Unit2Project\DataVisualizationEmployment")
C://Users//spyma//Desktop//Programming//School//DATA375//Unit2Project//DataVisualizationEmployment
spyma//Desktop//Programming//School//DATA375//Unit2Project//DataVisualizationEmployment
os.chdir("C://Users//spyma//Desktop//Programming//School//DATA375//Unit2Project//DataVisualizationEmployment")
data_2011.to_csv("data_files//all_data_M_2011.csv", index=False)
data_2012.to_csv("data_files//all_data_M_2012.csv", index=False)
data_2013.to_csv("data_files//all_data_M_2013.csv", index=False)
data_2014.to_csv("data_files//all_data_M_2014.csv", index=False)
data_2015.to_csv("data_files//all_data_M_2015.csv", index=False)
data_2016.to_csv("data_files//all_data_M_2016.csv", index=False)
data_2017.to_csv("data_files//all_data_M_2017.csv", index=False)
data_2018.to_csv("data_files//all_data_M_2018.csv", index=False)
data_2019.to_csv("data_files//all_data_M_2019.csv", index=False)
data_2020.to_csv("data_files//all_data_M_2020.csv", index=False)
data_2021.to_csv("data_files//all_data_M_2021.csv", index=False)
data_2022.to_csv("data_files//all_data_M_2022.csv", index=False)
data_2023.to_csv("data_files//all_data_M_2023.csv", index=False)
data_2011 = pd.read_csv("data_files//all_data_M_2011.csv")
data_2012 = pd.read_csv("data_files//all_data_M_2012.csv")
data_2013 = pd.read_csv("data_files//all_data_M_2013.csv")
data_2014 = pd.read_csv("data_files//all_data_M_2014.csv")
data_2015 = pd.read_csv("data_files//all_data_M_2015.csv")
data_2016 = pd.read_csv("data_files//all_data_M_2016.csv")
data_2017 = pd.read_csv("data_files//all_data_M_2017.csv")
data_2018 = pd.read_csv("data_files//all_data_M_2018.csv")
data_2019 = pd.read_csv("data_files//all_data_M_2019.csv")
data_2020 = pd.read_csv("data_files//all_data_M_2020.csv")
data_2021 = pd.read_csv("data_files//all_data_M_2021.csv")
data_2022 = pd.read_csv("data_files//all_data_M_2022.csv")
data_2023 = pd.read_csv("data_files//all_data_M_2023.csv")
data_2011.head()
